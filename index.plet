export CONFIG = {
  time_zone: "Europe/Copenhagen",
  title: "nielssp.dk",
  description: "The website and blog of a 31 year old software developer",
  copyright: "Niels Sonnich Poulsen",
}

export ROOT_PATH = '/'
export ROOT_URL = 'http://nielssp.dk'

import('modules/pygments.plet')
export pygmentize

import('modules/findlink.plet')
export find_link

export IMAGE_PRESERVE_LOSSLESS = false

OUTPUT_OBSERVERS | push(path => do
  if path | lower | ends_with('html')
    exec('htmlmin', path, path)
#  else if path | lower | ends_with('png')
#    exec('pngcrush', path, "{path}.optimized")
#    exec('mv', "{path}.optimized", path)
  end if
end do)

exec('mkdir -p', "{DIST_ROOT}/css")
exec('sassc --style compressed', "{SRC_ROOT}/scss/main.scss", "{DIST_ROOT}/css/main.css")
exec('mkdir -p', "{DIST_ROOT}/js")
exec("minify {"{SRC_ROOT}/js/gallery.js" | shell_escape} > {"{DIST_ROOT}/js/gallery.js" | shell_escape}")
exec("minify {"{SRC_ROOT}/js/mode.js" | shell_escape} > {"{DIST_ROOT}/js/mode.js" | shell_escape}")

add_static('favicon.ico')
add_static('robots.txt')

add_page('404.html', 'templates/404.plet.html')

tag_groups = {}

pages = list_content('content/pages', {suffix: '.md'})
for page in pages
  for tag in page.tags? or []
    if not tag_groups[tag]
      tag_groups[tag] = []
    end if
    tag_groups[tag] | push(page)
  end for
  if page.name == 'index'
    page.id = page.relative_path
  else
    page.id = "{page.relative_path}/{page.name}"
  end if
  page.link = "{page.id}/index.html"
  first_commit = exec('git log --format=%ci -1 --diff-filter=A', page.path)
  if first_commit
    page.created = time(first_commit)
  end if
  last_commit = exec('git log --format=%ci -1', page.path)
  if last_commit
    page.modified = time(last_commit)
  end if
  add_page(page.link, 'templates/page.plet.html', {
    page: page
  })
  add_reverse(page.path, page.link)
end for

published_posts = list_content('content/published', {suffix: '.md'}) | filter(p => p.published?) | sort_by_desc(.published)

for post in published_posts
  for tag in post.tags or []
    if not tag_groups[tag]
      tag_groups[tag] = []
    end if
    tag_groups[tag] | push(post)
  end for
  post.year = post.published | date('%Y')
  post.month = post.published | date('%m')
  post.link = "{post.year}/{post.month}/{post.name}/index.html"
  add_page(post.link, 'templates/post.plet.html', {
    post: post
  })
  add_reverse(post.path, post.link)
end for

published_posts = published_posts | filter(p => not p.exclude?)

add_page('posts.rss', 'templates/posts.plet.rss', {posts: published_posts})

add_page('articles/index.html', 'templates/articles.plet.html', {posts: published_posts})
add_page('archive/index.html', 'templates/archive.plet.html', {posts: published_posts})

for group in published_posts | group_by(.year)
  year = group[0].year
  add_page("{year}/index.html", 'templates/archive-year.plet.html', {
    posts: group,
    year: year,
  })
  for subgroup in group | group_by(.month)
    month = subgroup[0].month
    add_page("{year}/{month}/index.html", 'templates/archive-month.plet.html', {
      posts: subgroup,
      year: year,
      month: month,
    })
  end for
end for

updates = list_content('updates', {suffix: '.html'})

for update in updates
  update.published = update.name | time
  update.year = update.published | date('%Y')
end for

updates = updates | sort_by_desc(.published)

add_page('index.html', 'templates/updates.plet.html', {
  updates: updates,
})
add_page('updates.rss', 'templates/updates.plet.rss', {
  updates: updates,
})

make_devlog = name => do
  devlogs = list_content("content/{name}", {suffix: '.md'}) | filter(p => p.published?) | sort_by(.published)

  for i: post in devlogs
    for tag in post.tags or []
      if not tag_groups[tag]
        tag_groups[tag] = []
      end if
      tag_groups[tag] | push(post)
    end for
    post.link = "{name}/devlog/{post.name}/index.html"
    if i > 0
      previous = devlogs[i - 1]
      previous.next_link = post.link
      previous.next_title = post.title
      post.previous_link = previous.link
      post.previous_title = previous.title
    end if
    add_page(post.link, "templates/{name}-devlog.plet.html", {
      post: post
    })
    add_reverse(post.path, post.link)
  end for


  add_page("{name}/index.html", "templates/{name}.plet.html", {posts: devlogs})
  add_page("{name}/devlog.rss", "templates/{name}-devlog.plet.rss", {posts: devlogs})
end do

make_devlog('mug')
make_devlog('arq')

tags = []

for tag: posts in tag_groups
  tags | push({tag: tag, count: posts | length})
  add_page("tags/{tag}/index.html", 'templates/archive-tag.plet.html', {
    posts: posts | sort_by_desc(p => time(p.published? or p.modified)),
    tag: tag,
  })
end for

tags = tags | sort_by(.tag)

add_page('tags/index.html', 'templates/tags.plet.html', {tags: tags})

